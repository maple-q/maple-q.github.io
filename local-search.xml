<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>读书笔记（一）</title>
    <link href="/2021/01/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/01/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>《Go语言核心编程》一书随笔，记录下读书时的想法。</p><a id="more"></a><p>在《Go语言核心编程》一书中，坐着一上来便提出了这样一个学习新语言的方法：</p><p>“一是尽量利用已经掌握的编程语言，将新语言和已经掌握的语言进行对比，梳理出不同点和相同点，建立知识间的连接。二是在语言特性上对比新旧语言，新语言一般只是语法新，大多数语言特性都大同小异。“</p><p>个人觉得这是一个不错的学习方法，例如在学习Go语言容器时，可能会遇到各种容器，但大多数容器所提供的操作都是一样的，这时候可以去深入容器底层的实现，然后对比两种语言底层实现的差异性，再试着自己去实现容器，这样不仅仅停留在容器使用的阶段，还能够懂得容器底层的实现，容器相关操作的复杂度。</p><p>再比如之前看到的Go中Map是线程不安全的，多个线程同时读是没有问题的，但是同时读写就会直接运行错误。而Go提供了一个Sync.Map线程安全的Map，那么对比Python中的dict，便不禁会想，dict是线程安全的吗？为什么天天写Python代码却从来没有考虑过线程安全这一说法？</p><p>《Go语言核心编程》这本书确实和其他教编程的书有点不同，其他的编程书一上来便直接开始讲解语法啥的，但他却一上来从编译原理的角度来讲解。</p><p>这本书在讲语法、数据结构之前，先讲解了Go的词法单元，首先从编译器所做的角度来看代码。</p><p>“token是构成源程序的基本不可再分割的单元。编译器编译源程序的第一步就是将源程序分割为一个一个独立的token，这个过程就是词法分析。”，然后就是引申出编译器如何分割token，再引申出操作符和纯分隔符的概念。之后分割后的token在语法分析的时候作为一个一个的标识符存在，并将标识符划分为语言内置的标识符（关键字、内置数据类型、内置函数等）和用户自定义的标识符，从而例举出Go中所有的关键字、内置数据类型等等。</p><p>上面这些牵扯到编译原理方面的知识，其他编程书籍不讲解可能是考虑到读者不一定有编译原理相关的知识，因此直接跳过这方面的讲解，而这本书从编译原理的角度分析程序，然后引申出相关的Go的相关知识。</p><p>语言只是工具，关键在于能够解决问题。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python垃圾回收机制</title>
    <link href="/2020/12/16/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/12/16/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>在Python中，垃圾回收使用了引用计数、标记清除以及分代回收三种方式，那么这三种方式底层究竟是怎样实现的呢？</p><a id="more"></a><h2 id="PyObject-amp-PyVarObject"><a href="#PyObject-amp-PyVarObject" class="headerlink" title="PyObject  &amp; PyVarObject"></a>PyObject  &amp; PyVarObject</h2><p>我们经常听到一句话，在Python中，一切皆对象。到底啥叫一切皆对象？？？</p><p>其实，对象映射到底层就是一块内存空间，这块内存空间存放了一些数据，对象就是对这块内存空间的抽象。</p><p>Python底层是用C写的，在C中想要分配一块内存空间存放自己需要存放的数据时，通常会先定义一个结构体，然后通过<code>malloc</code>函数为这个结构体开辟一块空间，这样我们就拿到了这块空间的使用权，于是可以对这块空间进行操作了。</p><p>PyObject就是这样一个在C源码中定义好的结构体，它主要包含了四个部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> *_<span class="hljs-title">ob_next</span>;</span> <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> *_<span class="hljs-title">ob_prev</span>;</span><br>    Py_ssize_t ob_refcnt;<br>    PyTypeObject *ob_type;<br>&#125; PyObject;<br></code></pre></td></tr></table></figure><p>其中，<code>_ob_next</code>和<code>_ob_prev</code>是指向前后两个PyObject对象的指针，<code>ob_refcnt</code>则是该对象被引用时的计数器，存放了这个对象被多少个变量所引用，<code>ob_type</code>也是个指针，指向了对象的类型。</p><p>PyVarObject是在PyObject之上，添加了一个<code>ob_size</code>来表示可变对象的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject ob_base;<br>    Py_ssize_t ob_size; <span class="hljs-comment">/* Number of items in variable part */</span><br>&#125; PyVarObject;<br></code></pre></td></tr></table></figure><p>在Python中，这两个对象是所有对象的基石，之后的比如list对象、int对象都是在这两个对象之上添加了其他的内容所构成的新对象。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>我们从PyObject的结构体中可以看到，任何一个对象在创建时，必然有<code>ob_refcnt</code>来标识当前对象的引用数量。</p><p>在Python中写下下面的代码时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = a<br></code></pre></td></tr></table></figure><p>当python解释器执行<code>a = 1</code>时，会在内存空间新建一个int类型的对象，其值为1，并且引用计数值<code>ob_refcnt</code>的值也为1，然后创建一块名称为a的空间，用来存放int对象的地址。</p><p>当执行到<code>b = a</code>时，解释器创建一个名为b的空间，然后将1这个对象的地址赋值给b，1这个对象本身的引用计数值加1。</p><p><code>当一个对象的引用计数值大于0时，代表此时有变量指向它，而引用计数值为0时，则没有对象指向它，该对象应该被回收。</code></p><p>但是，Python在底层不仅仅只做了引用计数的加减，在创建一个新的对象时，Python解释器会将这个对象放入到一个<code>环状双向链表refchain</code>中，PyObject中的<code>_ob_next</code>和<code>_ob_prev</code>就是指向这个当前对象在链表中前后位置的对象。</p><p>这就是Python中引用计数的底层实现，通过<code>ob_refcnt</code>的值来控制对象的被引用个数，当值为0时，就会被垃圾回收器回收。</p><h2 id="标记清除-amp-分代收集"><a href="#标记清除-amp-分代收集" class="headerlink" title="标记清除 &amp; 分代收集"></a>标记清除 &amp; 分代收集</h2><p>标记清除算法和分代收集是对垃圾回收机制的一种改进，因为在垃圾回收机制中，存在<code>循环引用</code>的问题。</p><p>例如，我们写下如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>a.append(b)<br>b.append(a)<br><br><span class="hljs-keyword">del</span> a<br><span class="hljs-keyword">del</span> b<br></code></pre></td></tr></table></figure><p>当我们执行<code>a = [1, 2, 3]</code>时，解释器在内存空间创建一块内存空间存放列表对象，然后将列表对象的引用计数值设置为1。</p><p>同样，执行到<code>b = [2, 3, 4]</code>时，解释器也在内存创建一块空间存放列表对象，将该列表对象的引用计数值设置为1。</p><p>当执行到<code>a.append(b)</code>时，由于a有了对b对象的引用，所以b对象的引用计数值会加1，此时来到了2。</p><p>同样，当执行<code>b.append(b)</code>时，b也有了对a对象的引用，a对象的引用计数值也会加1，此时也来到了2。</p><p>当执行到<code>del a</code>和<code>del b</code>之后，a和b对象的引用计数值都会减1，此时a对象和b对象的<code>ob_refcnt</code>值都为1。</p><p>这段代码已经结束了，而我们创建的两个对象的引用计数值依然为1，由于引用计数不为0，所以此时不会被垃圾回收，这就导致了无用的对象一直驻留在内存中造成内存的浪费。</p><p>标记清除和分代收集算法就是为了解决这种循环引用导致内存无法回收问题而推出的新算法。</p><p>在分代收集算法中，有三个链表，名称分为为：<code>0代链表</code>、<code>1代链表</code>、<code>2代链表</code>。</p><p>当我们创建了一个容器对象时，这个对象不仅仅会加入到上面讲的<code>refchain</code>中，还有加入到0代链表中。</p><p>当0代链表中的元素个数到达一定阈值时，python会启动垃圾回收代码，对0代链表中所有元素进行遍历，找出是否存在循环引用的容器，如果存在，则将这两个容器的引用计数分别减1。然后判断引用计数值是否为0，如果为0则进行回收。</p><p>当0代链表的清理工作完成之后，会将元素移动到1代链表上。</p><p>同样，当0代链表完成了一定次数的清理工作之后，1代链表就会进行清理，清理过程和0代链表类似。</p><p>在Python中，我们可以通过<code>gc</code>模块获取到各个代清理触发的阈值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gc<br><br><br>print(gc.get_threshold())<br></code></pre></td></tr></table></figure><p>可以看到，在Python中默认的阈值分别为：<code>700, 10, 10</code>：</p><p><img src="image-20201216205056437.png" alt="image-20201216205056437"></p><p>也就是1代链表进行了10次清理，就会触发2代链表的清理，0代链表进行了10次清理，就会触发1代链表的清理，0代链表中有700个元素时，则会触发0代链表的清理。</p><h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>以上就是Python垃圾回收相关的内容，但是呢？Python还引用了缓存机制来避免内存频繁创建和销毁带来的开销。</p><p>缓存机制分为两类：<code>缓存池</code>和<code>free_list</code>。</p><p>缓存池机制以<code>int类型</code>对象和<code>字符</code>对象为主。Python解释器在启动时，就已经为一些小整数以及ASCII字符创建好了对象，当程序中需要用到这些小整数或者字符时，会直接返回缓存池中的地址。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">244</span><br>b = <span class="hljs-number">244</span><br>print(<span class="hljs-built_in">id</span>(a))<br>print(<span class="hljs-built_in">id</span>(b))<br><br>c = <span class="hljs-string">&quot;A&quot;</span><br>d = <span class="hljs-string">&quot;A&quot;</span><br>print(<span class="hljs-built_in">id</span>(c))<br>print(<span class="hljs-built_in">id</span>(d))<br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="image-20201216205609039.png" alt="image-20201216205609039"></p><p>另一种缓存机制就是free_list，主要使用到的数据结构是固定长度的单链表。</p><p>float对象就使用了free_list来进行缓存，在float对象创建时，首先判断free_list中是否有元素，如果有元素，则从链表头取出一个float对象，然后将这个对象的值改成这次要创建的float对象的值，这样就避免了重新分配内存空间。</p><p>同样，float对象在销毁时，不会直接进行内存的释放，而是会先判断单链表中是否已经满了，如果已经满了，则释放内存，如果没有满，会将这个对象从<code>refchain</code>中删掉，放入到free_list中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、引用计数为0时，对象不一定被直接释放，因为python有缓存机制</p><p>2、缓存机制分为两类：缓存池和free_list，缓存池主要为小整数和字符对象使用，free_list为float/list/dict/tuple对象使用。</p><p>3、分代收集时，0代收集的触发条件是链表中的个数，而1代和2代收集触发条件都是上一代的清理次数。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.bilibili.com/video/BV1dp4y1C7ja">武佩齐老师的讲解视频</a></p><p>[2] <a href="https://www.python.org/downloads/source/">Python3.9.2源码</a></p><p>[3] <a href="https://www.imooc.com/read/76/article/1902">慕课网专栏</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python垃圾回收</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JWT认证</title>
    <link href="/2020/12/14/JWT%E8%AE%A4%E8%AF%81/"/>
    <url>/2020/12/14/JWT%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>在进行前后端分离或者app开发的过程中，通常会使用到JWT来进行用户的认证。那么什么是JWT呢？JWT相较于传统的基于Token的认证有什么区别呢？为什么要使用JWT进行认证呢？</p><a id="more"></a><h2 id="JWT概念"><a href="#JWT概念" class="headerlink" title="JWT概念"></a>JWT概念</h2><p>JWT的完整英文名称为：Json Web Token，是目前跨域的解决方案。</p><p>在传统的基于Token的认证过程中，我们整体的逻辑如下：</p><p>1、用户访问登录页面，输入用户名和密码并提交。</p><p>2、服务端通过用户名和密码查询数据库，如果该用户不存在，则返回JSON字符串提示用户不存在。</p><p>3、如果用户存在，则生成一个随机字符串（可以通过UUID来生成），并将该随机字符串插入到数据库中，与该用户关联起来。</p><p>4、返回生成的Token给用户。</p><p>5、用户访问其他页面时，携带上Token发送给服务端。</p><p>6、服务端从请求中获取Token，如果获取不到，则代表用户没有进行认证，于是直接返回JSON字符串提示用户未进行认证。</p><p>7、如果获取到了Token，则从数据库中查找该Token是否存在，如果存在，则代表用户已经认证，于是返回相应的页面内容给用户。</p><p>以上就是传统的基于Token的认证方式，在该方式中，服务器需要存储生成的Token，如果用户量很大，则对于服务端的存储压力也会很大。</p><p><code>而在基于JWT的认证过程中，服务端在生成Token之后，并不会存储Token，而是直接返回给客户端即可。</code></p><p>那么问题来了，服务端怎么知道这个Token有没有被篡改呢？</p><h2 id="JWT详述"><a href="#JWT详述" class="headerlink" title="JWT详述"></a>JWT详述</h2><p>在JWT生成的Token中，包含三个部分，各个部分之间使用 <code>.</code> 号进行连接，最终组成一个如下的字符串：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span>.eyJzdWIiOiIxMjM<span class="hljs-number">0</span>NTY<span class="hljs-number">3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>IkpvaG<span class="hljs-number">4</span>gRG<span class="hljs-number">9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iOnRydWUsImp<span class="hljs-number">0</span>aSI<span class="hljs-number">6</span>IjYwYWIzMzNkLWVhOWQtNGY<span class="hljs-number">3</span>Mi<span class="hljs-number">05</span>YmExLTQ<span class="hljs-number">2</span>YTMyMmUwZDYxYSIsImlhdCI<span class="hljs-number">6</span>MTYwNzk<span class="hljs-number">0</span>ODQzMCwiZXhwIjoxNjA<span class="hljs-number">3</span>OTUyMDMwfQ.WsjezJbFwhmjutq<span class="hljs-number">86</span>h<span class="hljs-number">7</span>y<span class="hljs-number">1</span>d<span class="hljs-number">1</span>XcMxGTYvrV<span class="hljs-number">6</span>hDZ<span class="hljs-number">06</span>xtU<br></code></pre></td></tr></table></figure><p>这三个部分都是经过url_base64编码的，他们解码之后的内容分别为：</p><p>1、第一个部分为Header，其中包含了签名算法以及Token类型，通常如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>,<br>   <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、第二个部分为Payload，其中可以包含服务器想要返回给用户的信息，例如用户名，用户ID和Token的过期时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;124&quot;</span>,<br>   <span class="hljs-attr">&quot;user_name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>   <span class="hljs-attr">&quot;exp&quot;</span>: <span class="hljs-number">1607952030</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3、第三个部分为Signature，也即对于前两个部分的签名，签名算法使用Header中指定的签名算法，Salt需要服务器提供。</p><p><code>注意：这里是对前两个部分url_base64编码后并通过 </code>.<code> 连接之后的字符串的签名。</code></p><p>最终对生成的Signature进行一次url_base64编码，并和前两个部分组装在一起，生成一个完整的Token。</p><p>当服务器生成了Token之后，直接将其和其他信息一起返回给用户即可。用户下一次访问需要认证的页面时，携带上Token传递到服务器，服务器会对其进行验证。</p><p>假设用户自己篡改了过期时间，由于用户不知道签名算法使用的Salt，因此无法自己生成Token中的第三部分，所以服务器在校验时，会发现第三部分对不上，于是提示用户使用的是非法的Token。</p><h2 id="JWT实际使用"><a href="#JWT实际使用" class="headerlink" title="JWT实际使用"></a>JWT实际使用</h2><p>在Python中，可以使用 <code>pyjwt</code> 库完成Token的生成以及校验。</p><p>安装库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pyjwt<br></code></pre></td></tr></table></figure><p>这里使用的环境是Python2.7 + Django1.11.29版本。</p><p>1、新建一个Django项目：</p><p><img src="1607949803175-2fe87f84-11e6-44c3-90bd-c71555e434b1.png" alt="image.png"></p><p>2、在api/models.py中创建 <code>User</code> 实体类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> CharField<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserModel</span>(<span class="hljs-params">Model</span>):</span><br>    name = CharField(max_length=<span class="hljs-number">20</span>)<br>    password = CharField(max_length=<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>3、打开命令行，执行数据库迁移语句：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>4、完成数据库表的创建之后，在PyCharm中使用Database功能连接数据库：</p><p><img src="1607950188698-37de6646-d38b-4551-9f5c-d8487aa11859.png" alt="image.png"></p><p>在File选择我们Django项目中的 <code>db.sqlite3</code> 数据库，并测试连接，如果提示需要下载驱动，下载即可。</p><p><img src="1607950311150-cd45d156-4e2a-4958-afc1-6295b1794693.png" alt="image.png"></p><p>应用之后，我们打开我们的数据库，创建一个用户记录（记得点Submit）：</p><p><img src="1607950528413-288fcdfc-f8a9-4bc2-8743-c8d4a81ecfd4.png" alt="image.png"></p><p>5、在api/views.py中，创建视图类，模拟登陆以及访问其他页面的请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> TestUserModel<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        <span class="hljs-comment"># 查询数据库</span><br>        user_obj = TestUserModel.objects.<span class="hljs-built_in">filter</span>(name=username, password=password).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户名或密码错误&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br>        <span class="hljs-comment"># 生成JWT Token，这里我们只指定payload</span><br>        payload = &#123;<br>            <span class="hljs-string">&#x27;user_id&#x27;</span>: user_obj.<span class="hljs-built_in">id</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: user_obj.name,<br>            <span class="hljs-string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="hljs-number">1</span>)<br>        &#125;<br><br>        token = jwt.encode(payload=payload, key=settings.SECRET_KEY)<br><br>        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: token&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCenterView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token</span><br>        token = request.POST.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户未认证&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br>        <span class="hljs-comment"># 解码token</span><br>        <span class="hljs-keyword">try</span>:<br>            jwt.decode(token, key=settings.SECRET_KEY)<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;认证成功&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignatureError:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Token过期&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">103</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;无效Token&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br></code></pre></td></tr></table></figure><p>6、在jwt_demo/urls.py中加上路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> api.views <span class="hljs-keyword">import</span> LoginView, UserCenterView<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, LoginView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^center/$&#x27;</span>, UserCenterView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p>7、在settings.py中关闭csrf验证：</p><p><img src="1607953620240-665b36f4-861f-42a0-a453-b2db20b38e5b.png" alt="image.png"></p><p>8、启动程序，使用Postman工具先访问 <code>/center/</code> 接口：</p><p><img src="1607953996660-faf48dc6-5dfc-46cb-a940-5c892eac4f6b.png" alt="image.png"></p><p>再访问 <code>/login</code> 接口获取Token：</p><p><img src="1607954250229-b621e678-6115-4dd0-aa3b-aa2944f06e11.png" alt="image.png"></p><p>获取到Token之后，我们再次携带Token访问 <code>/center</code> 接口，可以看到，已经认证成功了：</p><p><img src="1607954268161-7f44a2d8-f25c-4dfd-ab1f-fab7ede094df.png" alt="image.png"></p><h2 id="JWT特点"><a href="#JWT特点" class="headerlink" title="JWT特点"></a>JWT特点</h2><p>1、<code>JWT是不加密的，因此不能将敏感的数据，例如用户密码存放在JWT中。</code></p><p>2、JWT不仅仅可以用于认证，<code>还能用于交换信息</code>，这样可以降低服务器查询数据库的次数。</p><p>3、JWT最大的缺点是其无法在使用过程中废止某个Token，或者更改权限，一旦服务器生成了Token，则在到期之前，都无法对其进行修改，因此Token的过期时间应该设置的比较短。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jsonwebtoken.io/">JWT官网</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">阮一峰老师的JWT入门教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JWT认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引</title>
    <link href="/2020/12/14/MySQL%E7%B4%A2%E5%BC%95/"/>
    <url>/2020/12/14/MySQL%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>此篇博文记录对于MySQL索引的学习，若有理解有误之处，望大佬指出。</p><a id="more"></a><h2 id="索引概念"><a href="#索引概念" class="headerlink" title="索引概念"></a>索引概念</h2><p>在数据库中，<code>索引通常来说是一种数据结构，这种数据结构能够加快数据的查找。</code></p><p>当数据库中的数据量达到百万甚至千万级别时，如果不通过索引查找，则需要进行百万或千万次的比较，查找会比较慢。一旦建立索引，查找数据通过索引数据结构快速定位到数据元素，对于查询速率会有很大的帮助。</p><p>例如我们写下这条SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name from user where id&#x3D;5;<br></code></pre></td></tr></table></figure><p>如果在<code>id</code>字段上建有索引，则MySQL会先通过索引来找到id为5的行，然后返回该行。</p><p>也就是说MySQL会先在索引数据结构上按索引值进行查找，然后返回所有匹配的行。</p><p>注意：索引不仅仅可以包含一个列的值，还可以包含多个列的值。如果包含多个列的值，则需要注意列的顺序，因为MySQL会使用索引的最左前缀列来进行匹配。</p><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>在MySQL中，索引是在存储引擎层实现的，而不是在服务器层实现的。</p><h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h3><p><strong>B-Tree对于索引列是按照顺序组织存储的，所以很适合进行范围查找数据。</strong></p><h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>Hash索引基于Hash表实现，对于每一行数据，存储引擎都会对所有的列计算一个Hash Code，Hash索引将所有的Hash Code存储在引擎中，同时在Hash表中存储指向每个数据行的指针。</p><p>在MySQL中，只有Memory引擎显示支持Hash索引，这也是Memory引擎默认的索引方式。</p><p>使用Hash索引的缺点：</p><p>1、Hash索引只包含哈希值和指向数据行的指针，不存储字段值，所以不能使用索引来避免读取行。</p><p>2、Hash索引的数据并不是按照索引值顺序存储的，所以不能用于排序场景。    </p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0 安装</title>
    <link href="/2020/12/13/MySQL8-0%E5%AE%89%E8%A3%85/"/>
    <url>/2020/12/13/MySQL8-0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>为了日后再次安装MySQL的方便，记录下在Windows下安装MySQL的过程。</p><a id="more"></a><h2 id="MySQL-8-0-安装"><a href="#MySQL-8-0-安装" class="headerlink" title="MySQL 8.0 安装"></a>MySQL 8.0 安装</h2><p>MySQL 8.0.11版本百度网盘链接：</p><p>链接：<a href="https://pan.baidu.com/s/1seTjx13rXyTSYY0C5aicHA">https://pan.baidu.com/s/1seTjx13rXyTSYY0C5aicHA</a><br>提取码：scva </p><p>下载到本地之后，这里将其解压到本地的<code>D:\Environment\mysql8.0\mysql-8.0.11-winx64</code>目录，然后进入该目录。</p><p><img src="image-20201213172218826.png" alt="image-20201213172218826"></p><p>1、创建一个空的<code>data</code>目录。</p><p>2、新建一个<code>my.ini</code>配置文件，写入以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span> =<span class="hljs-string">&quot;D:\Environment\mysql8.0\mysql-8.0.11-winx64&quot;</span><br><span class="hljs-attr">datadir</span> =<span class="hljs-string">&quot;D:\Environment\mysql8.0\mysql-8.0.11-winx64\data&quot;</span><br><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><br><br><span class="hljs-section">[client]</span><br><span class="hljs-attr">loose-default-character-set</span>=utf8mb4<br></code></pre></td></tr></table></figure><p><strong>注意：这里的<code>basedir</code>和<code>datadir</code>填写自己的mysql安装位置即可。</strong></p><p>3、进入到bin目录，然后在该目录下打开<code>cmd</code>窗口</p><p>4、在终端执行命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld.exe --initialize-insecure --user=mysql<br></code></pre></td></tr></table></figure><p><img src="image-20201213173344327.png" alt="image-20201213173344327"></p><p>5、执行安装命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mysqld -<span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="image-20201213173415238.png" alt="image-20201213173415238"></p><p>6、启动MySQL服务：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></table></figure><p><img src="image-20201213173453022.png" alt="image-20201213173453022"></p><p>7、终端输入命令登陆MySQL：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -u root -p</span><br></code></pre></td></tr></table></figure><p>提示输入密码时，直接回车即可。</p><p><img src="image-20201213173541441.png" alt="image-20201213173541441"></p><p>8、修改root用户密码：</p><ul><li>使用mysql数据库：<code>use mysql;</code></li><li>修改密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;root&#39;;</code></li><li>此时已经将密码修改成了root，再刷新权限：<code>flush privileges;</code></li><li>执行命令<code>exit</code>退出</li><li>使用登陆命令以及新密码重新登陆即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
