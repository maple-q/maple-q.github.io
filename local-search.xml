<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JWT认证</title>
    <link href="/2020/12/14/JWT%E8%AE%A4%E8%AF%81/"/>
    <url>/2020/12/14/JWT%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>在进行前后端分离或者app开发的过程中，通常会使用到JWT来进行用户的认证。那么什么是JWT呢？JWT相较于传统的基于Token的认证有什么区别呢？为什么要使用JWT进行认证呢？</p><a id="more"></a><h2 id="JWT概念"><a href="#JWT概念" class="headerlink" title="JWT概念"></a>JWT概念</h2><p>JWT的完整英文名称为：Json Web Token，是目前跨域的解决方案。</p><p>在传统的基于Token的认证过程中，我们整体的逻辑如下：</p><p>1、用户访问登录页面，输入用户名和密码并提交。</p><p>2、服务端通过用户名和密码查询数据库，如果该用户不存在，则返回JSON字符串提示用户不存在。</p><p>3、如果用户存在，则生成一个随机字符串（可以通过UUID来生成），并将该随机字符串插入到数据库中，与该用户关联起来。</p><p>4、返回生成的Token给用户。</p><p>5、用户访问其他页面时，携带上Token发送给服务端。</p><p>6、服务端从请求中获取Token，如果获取不到，则代表用户没有进行认证，于是直接返回JSON字符串提示用户未进行认证。</p><p>7、如果获取到了Token，则从数据库中查找该Token是否存在，如果存在，则代表用户已经认证，于是返回相应的页面内容给用户。</p><p>以上就是传统的基于Token的认证方式，在该方式中，服务器需要存储生成的Token，如果用户量很大，则对于服务端的存储压力也会很大。</p><p><code>而在基于JWT的认证过程中，服务端在生成Token之后，并不会存储Token，而是直接返回给客户端即可。</code></p><p>那么问题来了，服务端怎么知道这个Token有没有被篡改呢？</p><h2 id="JWT详述"><a href="#JWT详述" class="headerlink" title="JWT详述"></a>JWT详述</h2><p>在JWT生成的Token中，包含三个部分，各个部分之间使用 <code>.</code> 号进行连接，最终组成一个如下的字符串：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span>.eyJzdWIiOiIxMjM<span class="hljs-number">0</span>NTY<span class="hljs-number">3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>IkpvaG<span class="hljs-number">4</span>gRG<span class="hljs-number">9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iOnRydWUsImp<span class="hljs-number">0</span>aSI<span class="hljs-number">6</span>IjYwYWIzMzNkLWVhOWQtNGY<span class="hljs-number">3</span>Mi<span class="hljs-number">05</span>YmExLTQ<span class="hljs-number">2</span>YTMyMmUwZDYxYSIsImlhdCI<span class="hljs-number">6</span>MTYwNzk<span class="hljs-number">0</span>ODQzMCwiZXhwIjoxNjA<span class="hljs-number">3</span>OTUyMDMwfQ.WsjezJbFwhmjutq<span class="hljs-number">86</span>h<span class="hljs-number">7</span>y<span class="hljs-number">1</span>d<span class="hljs-number">1</span>XcMxGTYvrV<span class="hljs-number">6</span>hDZ<span class="hljs-number">06</span>xtU<br></code></pre></td></tr></table></figure><p>这三个部分都是经过url_base64编码的，他们解码之后的内容分别为：</p><p>1、第一个部分为Header，其中包含了签名算法以及Token类型，通常如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>,<br>   <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2、第二个部分为Payload，其中可以包含服务器想要返回给用户的信息，例如用户名，用户ID和Token的过期时间。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;124&quot;</span>,<br>   <span class="hljs-attr">&quot;user_name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>   <span class="hljs-attr">&quot;exp&quot;</span>: <span class="hljs-number">1607952030</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3、第三个部分为Signature，也即对于前两个部分的签名，签名算法使用Header中指定的签名算法，Salt需要服务器提供。</p><p><code>注意：这里是对前两个部分url_base64编码后并通过 </code>.<code> 连接之后的字符串的签名。</code></p><p>最终对生成的Signature进行一次url_base64编码，并和前两个部分组装在一起，生成一个完整的Token。</p><p>当服务器生成了Token之后，直接将其和其他信息一起返回给用户即可。用户下一次访问需要认证的页面时，携带上Token传递到服务器，服务器会对其进行验证。</p><p>假设用户自己篡改了过期时间，由于用户不知道签名算法使用的Salt，因此无法自己生成Token中的第三部分，所以服务器在校验时，会发现第三部分对不上，于是提示用户使用的是非法的Token。</p><h2 id="JWT实际使用"><a href="#JWT实际使用" class="headerlink" title="JWT实际使用"></a>JWT实际使用</h2><p>在Python中，可以使用 <code>pyjwt</code> 库完成Token的生成以及校验。</p><p>安装库：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pyjwt<br></code></pre></td></tr></table></figure><p>这里使用的环境是Python2.7 + Django1.11.29版本。</p><p>1、新建一个Django项目：</p><p><img src="1607949803175-2fe87f84-11e6-44c3-90bd-c71555e434b1.png" alt="image.png"></p><p>2、在api/models.py中创建 <code>User</code> 实体类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> CharField<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserModel</span>(<span class="hljs-params">Model</span>):</span><br>    name = CharField(max_length=<span class="hljs-number">20</span>)<br>    password = CharField(max_length=<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>3、打开命令行，执行数据库迁移语句：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>4、完成数据库表的创建之后，在PyCharm中使用Database功能连接数据库：</p><p><img src="1607950188698-37de6646-d38b-4551-9f5c-d8487aa11859.png" alt="image.png"></p><p>在File选择我们Django项目中的 <code>db.sqlite3</code> 数据库，并测试连接，如果提示需要下载驱动，下载即可。</p><p><img src="1607950311150-cd45d156-4e2a-4958-afc1-6295b1794693.png" alt="image.png"></p><p>应用之后，我们打开我们的数据库，创建一个用户记录（记得点Submit）：</p><p><img src="1607950528413-288fcdfc-f8a9-4bc2-8743-c8d4a81ecfd4.png" alt="image.png"></p><p>5、在api/views.py中，创建视图类，模拟登陆以及访问其他页面的请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> TestUserModel<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        <span class="hljs-comment"># 查询数据库</span><br>        user_obj = TestUserModel.objects.<span class="hljs-built_in">filter</span>(name=username, password=password).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户名或密码错误&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br>        <span class="hljs-comment"># 生成JWT Token，这里我们只指定payload</span><br>        payload = &#123;<br>            <span class="hljs-string">&#x27;user_id&#x27;</span>: user_obj.<span class="hljs-built_in">id</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: user_obj.name,<br>            <span class="hljs-string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="hljs-number">1</span>)<br>        &#125;<br><br>        token = jwt.encode(payload=payload, key=settings.SECRET_KEY)<br><br>        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: token&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCenterView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token</span><br>        token = request.POST.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;用户未认证&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br><br>        <span class="hljs-comment"># 解码token</span><br>        <span class="hljs-keyword">try</span>:<br>            jwt.decode(token, key=settings.SECRET_KEY)<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;认证成功&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignatureError:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;Token过期&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">return</span> HttpResponse(json.dumps(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">103</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;无效Token&#x27;</span>&#125;, ensure_ascii=<span class="hljs-literal">False</span>), content_type=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br></code></pre></td></tr></table></figure><p>6、在jwt_demo/urls.py中加上路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> api.views <span class="hljs-keyword">import</span> LoginView, UserCenterView<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, LoginView.as_view()),<br>    url(<span class="hljs-string">r&#x27;^center/$&#x27;</span>, UserCenterView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p>7、在settings.py中关闭csrf验证：</p><p><img src="1607953620240-665b36f4-861f-42a0-a453-b2db20b38e5b.png" alt="image.png"></p><p>8、启动程序，使用Postman工具先访问 <code>/center/</code> 接口：</p><p><img src="1607953996660-faf48dc6-5dfc-46cb-a940-5c892eac4f6b.png" alt="image.png"></p><p>再访问 <code>/login</code> 接口获取Token：</p><p><img src="1607954250229-b621e678-6115-4dd0-aa3b-aa2944f06e11.png" alt="image.png"></p><p>获取到Token之后，我们再次携带Token访问 <code>/center</code> 接口，可以看到，已经认证成功了：</p><p><img src="1607954268161-7f44a2d8-f25c-4dfd-ab1f-fab7ede094df.png" alt="image.png"></p><h2 id="JWT特点"><a href="#JWT特点" class="headerlink" title="JWT特点"></a>JWT特点</h2><p>1、<code>JWT是不加密的，因此不能将敏感的数据，例如用户密码存放在JWT中。</code></p><p>2、JWT不仅仅可以用于认证，<code>还能用于交换信息</code>，这样可以降低服务器查询数据库的次数。</p><p>3、JWT最大的缺点是其无法在使用过程中废止某个Token，或者更改权限，一旦服务器生成了Token，则在到期之前，都无法对其进行修改，因此Token的过期时间应该设置的比较短。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jsonwebtoken.io/">JWT官网</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">阮一峰老师的JWT入门教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JWT认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0 安装</title>
    <link href="/2020/12/13/MySQL8-0%E5%AE%89%E8%A3%85/"/>
    <url>/2020/12/13/MySQL8-0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>为了日后再次安装MySQL的方便，记录下在Windows下安装MySQL的过程。</p><a id="more"></a><h2 id="MySQL-8-0-安装"><a href="#MySQL-8-0-安装" class="headerlink" title="MySQL 8.0 安装"></a>MySQL 8.0 安装</h2><p>MySQL 8.0.11版本百度网盘链接：</p><p>链接：<a href="https://pan.baidu.com/s/1seTjx13rXyTSYY0C5aicHA">https://pan.baidu.com/s/1seTjx13rXyTSYY0C5aicHA</a><br>提取码：scva </p><p>下载到本地之后，这里将其解压到本地的<code>D:\Environment\mysql8.0\mysql-8.0.11-winx64</code>目录，然后进入该目录。</p><p><img src="image-20201213172218826.png" alt="image-20201213172218826"></p><p>1、创建一个空的<code>data</code>目录。</p><p>2、新建一个<code>my.ini</code>配置文件，写入以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">basedir</span> =<span class="hljs-string">&quot;D:\Environment\mysql8.0\mysql-8.0.11-winx64&quot;</span><br><span class="hljs-attr">datadir</span> =<span class="hljs-string">&quot;D:\Environment\mysql8.0\mysql-8.0.11-winx64\data&quot;</span><br><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><br><br><span class="hljs-section">[client]</span><br><span class="hljs-attr">loose-default-character-set</span>=utf8mb4<br></code></pre></td></tr></table></figure><p><strong>注意：这里的<code>basedir</code>和<code>datadir</code>填写自己的mysql安装位置即可。</strong></p><p>3、进入到bin目录，然后在该目录下打开<code>cmd</code>窗口</p><p>4、在终端执行命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld.exe --initialize-insecure --user=mysql<br></code></pre></td></tr></table></figure><p><img src="image-20201213173344327.png" alt="image-20201213173344327"></p><p>5、执行安装命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mysqld -<span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="image-20201213173415238.png" alt="image-20201213173415238"></p><p>6、启动MySQL服务：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></table></figure><p><img src="image-20201213173453022.png" alt="image-20201213173453022"></p><p>7、终端输入命令登陆MySQL：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql -u root -p</span><br></code></pre></td></tr></table></figure><p>提示输入密码时，直接回车即可。</p><p><img src="image-20201213173541441.png" alt="image-20201213173541441"></p><p>8、修改root用户密码：</p><ul><li>使用mysql数据库：<code>use mysql;</code></li><li>修改密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;root&#39;;</code></li><li>此时已经将密码修改成了root，再刷新权限：<code>flush privileges;</code></li><li>执行命令<code>exit</code>退出</li><li>使用登陆命令以及新密码重新登陆即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
